module editor/editor

imports
  include/MoBL
  analyze
  mobl
  check
  desugar
  pp
  style
  lib/editor-common
  generation/html
  analyze

imports
  editor/resolve
  editor/complete
  editor/hover
  editor/derive-migration
  generation/compile
  generation/action
  optimize/optimize
  util

rules


  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast2, errors, warnings, notes)
    where not(Configuration(_) := ast)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath := project-path
              IsImported  : path )
      ; if not(Configuration(_) := ast) then
          setup-paths
        end
      ; ast2 := <analyze; capture-style-configs; store-result> ast
      ; (Module(mod-name, _) := ast2 <+ Application(mod-name, _) := ast2 <+ ServerApplication(mod-name, _, _) := ast2 <+ Configuration(_) := ast2; mod-name := "")
      ; rules ( CompilingModule := mod-name
                CompilingFilename := path )
      ; errors   := <collect-all(constraint-error, conc)> ast2
      ; if not([] := errors) then
          rules ( HasErrors := True() )
          ; debug(!"Errors: ")
        end
      ; warnings := <collect-all(constraint-warning, conc)> ast2
      ; notes    := <collect-all(constraint-note, conc)> ast2

  editor-analyze:
    (ast@Configuration(_), path, project-path) -> (ast, errors, warnings, notes)
    with
    errors   := <filter(where(not(?(StyleVar(_),_))))><collect-all(constraint-error, conc)> ast
      ; if not([] := errors) then
          rules ( HasErrors := True() )
          ; debug(!"Errors: ")
        end
      ; warnings := <collect-all(constraint-warning, conc)> ast
      ; notes    := <collect-all(constraint-note, conc)> ast

  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term

rules

  editor-desugar :
    (selected, position, ast, path, project-path) -> (filename, <desugar-all> ast2)
    with
            rules ( ProjectPath := project-path
                    IsImported  : path )
      ; setup-paths
      ; ast2 := <analyze; store-result> ast
      ; filename := <guarantee-extension(|"aterm")> "desugared"

  format-code :
    (selected, position, ast, path, project-path) -> (filename, <pp-mobl> selected)
    with
      filename := <guarantee-extension(|"mobl")> "formatted"

rules

  external deltree(|)
  external confirm-dialog(|)

  generate-artifacts:
    (selected, position, ast, path, project-path) -> None() //(filename-html, result-html)
    where not(HasErrors)
    where not(Configuration(_) := ast)
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath     := project-path
              CachedParseAst  : path -> ast )
      ; setup-paths
      ; (Module(mod-name, _)  := ast <+ Application(mod-name, _) := ast <+ ServerApplication(mod-name, _, _) := ast)
      ; rules ( CompilingModule := mod-name )
      ; <compile> ast

  generate-artifacts:
    (selected, position, Configuration(_), path, project-path) -> None()
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath     := project-path )
      ; setup-paths
    where <readdir> project-path
        ; list-loop(
            if has-extension(|"mobl") then
              where({ast:
                ast := <parse-file> $[[project-path]/[<id>]]
                ; if Application(_, _) := ast then
                    <compile> ast
                  end
              })
            end
          )
  generate-artifacts:
    _ -> None() //(filename-html, result-html)
    where HasErrors

  editor-optimize :
    (selected, position, ast, path, project-path) -> None()
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath     := project-path
              CachedParseAst  : path -> ast )
      ; setup-paths
      ; (Module(mod-name, _)  := ast <+ Application(mod-name, _) := ast <+ ServerApplication(mod-name, _, _) := ast)
      ; rules ( CompilingModule := mod-name
                OutputPath := <ReleaseOutputPath>)
      ; <optimized-compile(|mod-name)> ast

  editor-clean-project :
    (selected, position, ast, path, project-path) -> None()
    with
      rules ( ProjectPath := project-path )
      ; setup-paths
      ; try(
          //<confirm-dialog> "Are you sure you want to clean the project, this will remove the output directories."
          if <file-exists> <OutputPath> then
              <deltree> <OutputPath>
            end
          ; if <file-exists> <ReleaseOutputPath> then
              <deltree> <ReleaseOutputPath>
            end
            ; if <file-exists> $[[project-path]/native/] then
              <deltree>  $[[project-path]/native/] 
            end
          ; <refresh-workspace-file> <ProjectPath>
       )

  editor-rebuild-project :
    (selected, position, ast, path, project-path) -> None()
    with
      // Ensure all dynamic rules are properly scoped
      try(dr-scope-all-end)
      ; dr-scope-all-start
    with
      rules ( ProjectPath     := project-path
              CachedParseAst  : path -> ast )
      ; setup-paths
      ; if <file-exists> <OutputPath> then
          <deltree> <OutputPath>
        end
    where <readdir> project-path
        ; list-loop(
            if has-extension(|"mobl") then
              where({ast:
                ast := <parse-file> $[[project-path]/[<id>]]
                ; if Application(_, _) := ast then
                    <compile> ast
                  end
              })
            end
          )
 
 
 generate-offline-manifest: (selected, position, ast, path, project-path) -> None()
  with
  	 try(dr-scope-all-end)
      ; dr-scope-all-start
      ;rules ( ProjectPath     := project-path
              CachedParseAst  : path -> ast )
      ; setup-paths
      ;ast2:=<analyze>ast  
      ; (Module(mod-name, _) := ast2 <+ Application(mod-name, _) := ast <+ ServerApplication(mod-name, _, _) := ast <+ Configuration(_) := ast; mod-name := "")
       ; where(
			   setting* := <get-configuration>
			  ; manifest-filename   := <concat-strings; guarantee-extension(|"manifest")> [<OutputPath>, "/", <qid-to-path> mod-name]
			  ; if <fetch-elem(?HtmlSetting(index-html-setting))> setting* then
              		index-html-filename := index-html-setting
           		else
              		index-html-filename := <concat-strings>[<qid-to-path> mod-name, ".html"]
            	end
              ; special-js* := ["js/jquery-1.7.1.min.js", "js/persistence.js", "js/persistence.store.sql.js", "js/persistence.store.websql.js", "js/persistence.store.memory.js", "js/persistence.search.js"]	
              ; cachable-resource* := [index-html-filename, <get-all-resources-includeall>mod-name, special-js*]
            )
            ;<debug(!"here")>cachable-resource*
            ; <debug(!"manifest-filename:")>manifest-filename
         ;fp3 := <fopen <+ debug(!"Could not open file: "); fail> (manifest-filename, "w")
              ; {| ResourceProcessed
                 : <fputs> (<generate-manifest <+ debug(!"Could not generate index.manifest")> cachable-resource*, fp3)
                 |}
              ; <fclose> fp3
              ; <refresh-workspace-file> manifest-filename   
